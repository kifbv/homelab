name: Build Raspberry Pi 5 Debian Image (Cross-Compilation)

on:
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Name for the output image'
        required: false
        default: 'rpi5-k8s-debian-cross'
      kubernetes_version:
        description: 'Kubernetes version to install'
        required: false
        default: 'v1.33'
      pod_subnet:
        description: 'CIDR for Kubernetes pod network'
        required: false
        default: '10.244.64.0/18'
      service_subnet:
        description: 'CIDR for Kubernetes service network'
        required: false
        default: '10.244.0.0/20'
  push:
    branches: [ main ]
    paths:
      - 'scripts/**'
      - 'userpatches/**'
      - '.github/workflows/build-rpi5-image-cross.yml'

env:
  IMAGE_SIZE: "4G"
  DEBIAN_RELEASE: "bookworm"
  DEBIAN_MIRROR: "http://deb.debian.org/debian"
  RPI_FIRMWARE_REPO: "https://github.com/raspberrypi/firmware.git"

jobs:
  build-image:
    runs-on: ubuntu-24.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        df -h
        
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          coreutils quilt parted qemu-user-static debootstrap zerofree zip \
          dosfstools libarchive-tools libcap2-bin grep rsync xz-utils file \
          git curl bc gpg pigz xxd arch-test bmap-tools fdisk kpartx \
          binfmt-support systemd-container qemu-system-arm qemu-utils \
          gcc-aarch64-linux-gnu libc6-dev-arm64-cross
          
    - name: Set up Docker Buildx (for QEMU support)
      uses: docker/setup-buildx-action@v3
      
    - name: Setup QEMU and binfmt for ARM64 emulation
      run: |
        # Use Docker's QEMU setup which is more reliable
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        
        # Verify QEMU static exists and is executable
        ls -la /usr/bin/qemu-aarch64-static
        /usr/bin/qemu-aarch64-static --version
        
        # Check what binfmt registrations exist
        echo "=== Current binfmt registrations ==="
        ls -la /proc/sys/fs/binfmt_misc/ || echo "binfmt_misc not available"
        
        # Look for any ARM64 handlers
        find /proc/sys/fs/binfmt_misc/ -name "*aarch64*" -o -name "*arm64*" 2>/dev/null || echo "No ARM64 handlers found by name"
        
        # Test cross-compilation (this should always work)
        echo 'int main(){return 0;}' | aarch64-linux-gnu-gcc -x c -o /tmp/test_arm64 -
        file /tmp/test_arm64
        echo "✓ Cross-compilation test passed"
        
        # Test ARM64 execution (this tests QEMU emulation)
        echo '#include <stdio.h>
        int main(){ printf("ARM64 emulation works!\\n"); return 0; }' > /tmp/test_arm64.c
        aarch64-linux-gnu-gcc /tmp/test_arm64.c -o /tmp/test_arm64_exec
        
        # Try to execute the ARM64 binary
        if /tmp/test_arm64_exec; then
          echo "✓ ARM64 emulation test passed"
        else
          echo "⚠ ARM64 emulation test failed, but build may still work"
          echo "Checking available emulators..."
          ls -la /proc/sys/fs/binfmt_misc/
        fi
        
    - name: Create build environment
      run: |
        sudo mkdir -p /build/{image,mnt,firmware}
        sudo chown -R $USER:$USER /build
        
    - name: Download Raspberry Pi firmware
      run: |
        cd /build/firmware
        git clone --depth 1 ${{ env.RPI_FIRMWARE_REPO }} .
        
    - name: Build Debian image with cross-compilation
      env:
        IMAGE_NAME: ${{ github.event.inputs.image_name || 'rpi5-k8s-debian-cross' }}
        KUBERNETES_VERSION: ${{ github.event.inputs.kubernetes_version || 'v1.33' }}
        POD_SUBNET: ${{ github.event.inputs.pod_subnet || '10.244.64.0/18' }}
        SERVICE_SUBNET: ${{ github.event.inputs.service_subnet || '10.244.0.0/20' }}
      run: |
        sudo -E ./scripts/build-rpi5-image-cross.sh
        
    - name: Test image integrity
      run: |
        cd /build/image
        # Basic integrity checks
        ls -lh *.img
        file *.img
        
        # Check partition table
        sudo fdisk -l *.img
        
        # Mount and verify basic structure
        LOOP_DEVICE=$(sudo losetup --find --show --partscan *.img)
        sudo mkdir -p /tmp/test_{boot,root}
        sudo mount "${LOOP_DEVICE}p1" /tmp/test_boot
        sudo mount "${LOOP_DEVICE}p2" /tmp/test_root
        
        # Verify key files exist
        echo "=== Boot partition contents ==="
        ls -la /tmp/test_boot/
        test -f /tmp/test_boot/bcm2712-rpi-5-b.dtb && echo "✓ Pi 5 device tree found"
        test -f /tmp/test_boot/kernel_2712.img && echo "✓ Pi 5 kernel found"
        test -f /tmp/test_boot/config.txt && echo "✓ Boot config found"
        
        echo "=== Root partition key files ==="
        test -f /tmp/test_root/usr/bin/kubelet && echo "✓ kubelet found"
        test -f /tmp/test_root/usr/bin/kubeadm && echo "✓ kubeadm found"
        test -f /tmp/test_root/usr/bin/crio && echo "✓ crio found"
        test -d /tmp/test_root/home/pi && echo "✓ pi user home found"
        test -f /tmp/test_root/root/bootstrap-controlplane.sh && echo "✓ bootstrap script found"
        
        # Cleanup
        sudo umount /tmp/test_boot /tmp/test_root
        sudo losetup -d "$LOOP_DEVICE"
        sudo rmdir /tmp/test_{boot,root}
        
    - name: Compress image
      run: |
        cd /build/image
        sudo xz -9 -T 0 *.img
        
    - name: Calculate checksums
      run: |
        cd /build/image
        sudo sha256sum *.img.xz > SHA256SUMS
        cat SHA256SUMS
        
    - name: Upload image artifact
      uses: actions/upload-artifact@v4
      with:
        name: rpi5-debian-image-cross-${{ github.run_number }}
        path: |
          /build/image/*.img.xz
          /build/image/SHA256SUMS
        retention-days: 30
        
    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ github.run_number }}
        path: |
          /build/build.log
          /var/log/debootstrap.log
        retention-days: 7
        
    - name: Create release (on main branch)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.run_number }}-cross
        name: Raspberry Pi 5 Debian Image v${{ github.run_number }} (Cross-compiled)
        body: |
          Cross-compiled build of Raspberry Pi 5 Debian ${{ env.DEBIAN_RELEASE }} image with Kubernetes ${{ github.event.inputs.kubernetes_version || 'v1.33' }}.
          
          **Build Method:** Cross-compilation on ubuntu-24.04 with QEMU emulation
          
          **Image Details:**
          - Base: Debian ${{ env.DEBIAN_RELEASE }} ARM64
          - Kubernetes: ${{ github.event.inputs.kubernetes_version || 'v1.33' }}
          - Container Runtime: CRI-O
          - Pod Subnet: ${{ github.event.inputs.pod_subnet || '10.244.64.0/18' }}
          - Service Subnet: ${{ github.event.inputs.service_subnet || '10.244.0.0/20' }}
          - Build Host: x86_64 ubuntu-24.04 (cross-compiled)
          
          **Usage:**
          1. Download and decompress the image: `xz -d *.img.xz`
          2. Configure for your node: `sudo ./scripts/configure-rpi5-image.sh --image *.img --hostname controlplane --ssh-key ~/.ssh/id_ed25519.pub --password yourpassword`
          3. Flash to storage: `sudo dd if=*.img of=/dev/YOUR_DEVICE bs=4M status=progress`
          4. Boot your Raspberry Pi 5
          
          **Cross-compilation Notes:**
          - Built using QEMU user-mode emulation
          - All ARM64 binaries compiled on x86_64 host  
          - Tested for basic integrity and file presence
        files: |
          /build/image/*.img.xz
          /build/image/SHA256SUMS
        draft: false
        prerelease: false