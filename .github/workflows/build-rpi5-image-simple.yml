name: Build Raspberry Pi 5 Debian Image (Simple Cross-Compilation)

on:
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Name for the output image'
        required: false
        default: 'rpi5-k8s-debian-simple'
      kubernetes_version:
        description: 'Kubernetes version to install'
        required: false
        default: 'v1.33'
      pod_subnet:
        description: 'CIDR for Kubernetes pod network'
        required: false
        default: '10.244.64.0/18'
      service_subnet:
        description: 'CIDR for Kubernetes service network'
        required: false
        default: '10.244.0.0/20'

env:
  IMAGE_SIZE: "4G"
  DEBIAN_RELEASE: "bookworm"
  DEBIAN_MIRROR: "http://deb.debian.org/debian"
  RPI_FIRMWARE_REPO: "https://github.com/raspberrypi/firmware.git"

jobs:
  build-image:
    runs-on: ubuntu-24.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        df -h
        
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          coreutils quilt parted qemu-user-static debootstrap zerofree zip \
          dosfstools libarchive-tools libcap2-bin grep rsync xz-utils file \
          git curl bc gpg pigz xxd arch-test bmap-tools fdisk kpartx \
          binfmt-support systemd-container \
          gcc-aarch64-linux-gnu libc6-dev-arm64-cross
          
    - name: Simple QEMU setup with multiarch container
      run: |
        # Use the well-tested multiarch QEMU setup
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        
        # Verify QEMU is available
        ls -la /usr/bin/qemu-aarch64-static
        /usr/bin/qemu-aarch64-static --version
        
        # Test cross-compilation works
        echo 'int main(){return 0;}' | aarch64-linux-gnu-gcc -x c -o /tmp/test_cross -
        file /tmp/test_cross
        echo "âœ“ Cross-compilation setup complete"
        
        # Show binfmt status (informational)
        echo "=== binfmt status ==="
        ls /proc/sys/fs/binfmt_misc/ 2>/dev/null || echo "binfmt_misc not accessible"
        
    - name: Create build environment
      run: |
        sudo mkdir -p /build/{image,mnt,firmware}
        sudo chown -R $USER:$USER /build
        
    - name: Download Raspberry Pi firmware
      run: |
        cd /build/firmware
        git clone --depth 1 ${{ env.RPI_FIRMWARE_REPO }} .
        
    - name: Build Debian image with simplified cross-compilation
      env:
        IMAGE_NAME: ${{ github.event.inputs.image_name || 'rpi5-k8s-debian-simple' }}
        KUBERNETES_VERSION: ${{ github.event.inputs.kubernetes_version || 'v1.33' }}
        POD_SUBNET: ${{ github.event.inputs.pod_subnet || '10.244.64.0/18' }}
        SERVICE_SUBNET: ${{ github.event.inputs.service_subnet || '10.244.0.0/20' }}
      run: |
        # Create a simplified build script that doesn't depend on complex binfmt
        cat > /tmp/simple-build.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Build configuration
        BUILD_DIR="/build"
        IMAGE_DIR="${BUILD_DIR}/image"
        MOUNT_DIR="${BUILD_DIR}/mnt"
        FIRMWARE_DIR="${BUILD_DIR}/firmware"
        ROOTFS_DIR="${MOUNT_DIR}/rootfs"
        BOOT_DIR="${MOUNT_DIR}/boot"
        
        # Create image
        echo "Creating ${IMAGE_NAME}.img"
        cd "$IMAGE_DIR"
        dd if=/dev/zero of="${IMAGE_NAME}.img" bs=1 count=0 seek="$IMAGE_SIZE"
        
        # Setup loop device and partitions
        LOOP_DEVICE=$(sudo losetup --find --show "${IMAGE_NAME}.img")
        sudo parted -s "$LOOP_DEVICE" mklabel msdos
        sudo parted -s "$LOOP_DEVICE" mkpart primary fat32 1MiB 512MiB
        sudo parted -s "$LOOP_DEVICE" mkpart primary ext4 512MiB 100%
        sudo parted -s "$LOOP_DEVICE" set 1 boot on
        sudo partprobe "$LOOP_DEVICE"
        sleep 2
        
        # Format partitions
        sudo mkfs.vfat -F 32 -n "BOOT" "${LOOP_DEVICE}p1"
        sudo mkfs.ext4 -L "rootfs" "${LOOP_DEVICE}p2"
        
        # Mount partitions
        mkdir -p "$BOOT_DIR" "$ROOTFS_DIR"
        sudo mount "${LOOP_DEVICE}p2" "$ROOTFS_DIR"
        sudo mount "${LOOP_DEVICE}p1" "$BOOT_DIR"
        
        # First stage debootstrap (no chroot needed)
        echo "Running debootstrap first stage"
        sudo debootstrap --arch arm64 --foreign \
          --include=ca-certificates,openssh-server,systemd,udev,locales \
          "$DEBIAN_RELEASE" "$ROOTFS_DIR" "$DEBIAN_MIRROR"
        
        # Copy QEMU for second stage
        sudo cp /usr/bin/qemu-aarch64-static "$ROOTFS_DIR/usr/bin/"
        
        # Second stage debootstrap (with explicit QEMU)
        echo "Running debootstrap second stage with explicit QEMU"
        sudo chroot "$ROOTFS_DIR" /usr/bin/qemu-aarch64-static /bin/bash -c "/debootstrap/debootstrap --second-stage"
        
        # Mount proc/sys for package installation
        sudo mount -t proc proc "$ROOTFS_DIR/proc"
        sudo mount -t sysfs sysfs "$ROOTFS_DIR/sys"
        sudo mount -o bind /dev "$ROOTFS_DIR/dev"
        sudo mount -o bind /dev/pts "$ROOTFS_DIR/dev/pts"
        
        # Basic system configuration
        echo "Configuring basic system"
        echo "rpi5-debian" | sudo tee "$ROOTFS_DIR/etc/hostname" > /dev/null
        echo "127.0.0.1 localhost" | sudo tee "$ROOTFS_DIR/etc/hosts" > /dev/null
        echo "127.0.1.1 rpi5-debian" | sudo tee -a "$ROOTFS_DIR/etc/hosts" > /dev/null
        
        # Configure fstab
        cat << 'FSTAB' | sudo tee "$ROOTFS_DIR/etc/fstab" > /dev/null
        LABEL=rootfs    /               ext4    defaults,noatime  0       1
        LABEL=BOOT      /boot/firmware  vfat    defaults          0       2
        FSTAB
        
        # Configure APT sources
        cat << SOURCES | sudo tee "$ROOTFS_DIR/etc/apt/sources.list" > /dev/null
        deb $DEBIAN_MIRROR $DEBIAN_RELEASE main contrib non-free-firmware
        deb $DEBIAN_MIRROR-security $DEBIAN_RELEASE-security main contrib non-free-firmware
        deb $DEBIAN_MIRROR $DEBIAN_RELEASE-updates main contrib non-free-firmware
        SOURCES
        
        # Update package lists
        sudo chroot "$ROOTFS_DIR" /usr/bin/qemu-aarch64-static /bin/bash -c "apt-get update"
        
        # Install essential packages
        sudo chroot "$ROOTFS_DIR" /usr/bin/qemu-aarch64-static /bin/bash -c "
          apt-get install -y vim git sudo curl gpg software-properties-common
        "
        
        # Create pi user
        sudo chroot "$ROOTFS_DIR" /usr/bin/qemu-aarch64-static /bin/bash -c "
          useradd -m -s /bin/bash -G sudo pi
          echo 'pi ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/010_pi-nopasswd
        "
        
        # Install Kubernetes (simplified)
        echo "Installing Kubernetes components"
        sudo chroot "$ROOTFS_DIR" /usr/bin/qemu-aarch64-static /bin/bash -c "
          curl -fsSL https://pkgs.k8s.io/core:/stable:/$KUBERNETES_VERSION/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/$KUBERNETES_VERSION/deb/ /' > /etc/apt/sources.list.d/kubernetes.list
          apt-get update
          apt-get install -y kubelet kubeadm kubectl
          apt-mark hold kubelet kubeadm kubectl
          systemctl enable ssh
        "
        
        # Copy firmware
        echo "Installing Pi 5 firmware"
        sudo cp -r "$FIRMWARE_DIR/boot"/* "$BOOT_DIR/"
        
        # Create basic config.txt
        cat << 'CONFIG' | sudo tee "$BOOT_DIR/config.txt" > /dev/null
        arm_64bit=1
        kernel=kernel_2712.img
        device_tree=bcm2712-rpi-5-b.dtb
        gpu_mem=128
        enable_uart=1
        CONFIG
        
        # Create cmdline.txt
        echo "console=serial0,115200 console=tty1 root=LABEL=rootfs rootfstype=ext4 fsck.repair=yes rootwait" | sudo tee "$BOOT_DIR/cmdline.txt" > /dev/null
        
        # Copy bootstrap scripts
        sudo cp scripts/controlplane-template.sh "$ROOTFS_DIR/root/bootstrap-controlplane.sh"
        sudo cp scripts/kubeadm-init.yaml.tpl "$ROOTFS_DIR/root/"
        sudo chmod +x "$ROOTFS_DIR/root/bootstrap-controlplane.sh"
        
        # Generate tokens
        echo "$(tr -dc 'a-f0-9' < /dev/urandom | head -c 6).$(tr -dc 'a-f0-9' < /dev/urandom | head -c 16)" | sudo tee "$ROOTFS_DIR/root/kubeadm-init-token" > /dev/null
        tr -dc 'a-f0-9' < /dev/urandom | head -c 64 | sudo tee "$ROOTFS_DIR/root/kubeadm-cert-key" > /dev/null
        
        # Cleanup
        sudo rm "$ROOTFS_DIR/usr/bin/qemu-aarch64-static"
        sudo umount "$ROOTFS_DIR/proc" "$ROOTFS_DIR/sys" "$ROOTFS_DIR/dev/pts" "$ROOTFS_DIR/dev"
        sudo umount "$BOOT_DIR" "$ROOTFS_DIR"
        sudo losetup -d "$LOOP_DEVICE"
        
        echo "Build completed: ${IMAGE_NAME}.img"
        ls -lh "${IMAGE_NAME}.img"
        EOF
        
        chmod +x /tmp/simple-build.sh
        sudo -E /tmp/simple-build.sh
        
    - name: Compress image
      run: |
        cd /build/image
        xz -9 -T 0 *.img
        
    - name: Calculate checksums
      run: |
        cd /build/image
        sha256sum *.img.xz > SHA256SUMS
        cat SHA256SUMS
        
    - name: Upload image artifact
      uses: actions/upload-artifact@v4
      with:
        name: rpi5-debian-image-simple-${{ github.run_number }}
        path: |
          /build/image/*.img.xz
          /build/image/SHA256SUMS
        retention-days: 30